//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Input/Playerinput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Playerinput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Playerinput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Playerinput"",
    ""maps"": [
        {
            ""name"": ""PlayerAction"",
            ""id"": ""b3495435-86eb-48c5-87db-9fb24cbc4a0e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b2d32202-0f89-401a-856c-86544f1978ff"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""3b1cf35a-416a-4528-a4f8-8f0b182094f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""0291cf87-6558-4b01-a30f-b77163f34483"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""6969f10d-c931-4bfd-9b2e-f26dc382c236"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Buy"",
                    ""type"": ""Button"",
                    ""id"": ""39588b37-6b48-4161-8a30-958a7b201f2d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cheat "",
                    ""type"": ""Button"",
                    ""id"": ""e494ea4a-93d1-4703-b38c-3f36406a8e5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Status"",
                    ""type"": ""Button"",
                    ""id"": ""2e5711b1-edd2-4617-8187-7e2d193864d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Screenshot"",
                    ""type"": ""Button"",
                    ""id"": ""36c50bec-d7bf-4f65-bb29-1316019527e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skip"",
                    ""type"": ""Button"",
                    ""id"": ""0716ddb3-6895-4586-afbd-c24914faacd2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""9d386f89-2e22-4042-8323-70b738243ea9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""2dd47ee0-8853-4193-94fe-810e7cc9a577"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""01a8d12c-caf9-48ee-a8bf-9e3decf0835b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""43761efa-7c9c-4531-8d6b-9b251215ef19"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""key and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a030f45f-f5f2-4c25-885a-f2b92e05ee3a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""key and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""946eded0-4a75-40c1-8c1c-b0f0482326a9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""key and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""834a9659-a72f-490c-915c-f8a21bda147e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""key and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7a87511d-b024-4805-a2e7-fe86365c81d6"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eda4540d-f130-4743-be1b-a5a25fa97703"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""key and mouse"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb93baf9-0198-4cf5-b5b7-4d3da36c0b8b"",
                    ""path"": ""<Touchscreen>/touch0/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0aac234-b7a9-4349-830a-7c7ca6035717"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""key and mouse"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc366652-6319-4c29-b892-4c3d97f688a8"",
                    ""path"": ""<Touchscreen>/touch2/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Phos"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc234798-9c11-475d-b6c2-94e870b56927"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""key and mouse"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b078352-4ff3-4837-bd7f-f8ff4b7e1175"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""key and mouse"",
                    ""action"": ""Buy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb936e13-0f03-43c4-9d1e-01186de6bedf"",
                    ""path"": ""<Touchscreen>/touch1/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Phos"",
                    ""action"": ""Buy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c02719d0-9268-4997-b3d3-f29f3af780d8"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cheat "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f6a7e94-d337-44ec-84e2-57d346ca4fc1"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Status"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23b5a431-1d0a-4606-96b8-dceb7b853a0d"",
                    ""path"": ""<Keyboard>/f12"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Screenshot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69049f10-9469-446d-afb0-23249a59d4bf"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""key and mouse"",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""018240d4-e451-4a31-9475-5df3933444f6"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""key and mouse"",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40598703-b3c9-40d4-8b75-1af407ce1e74"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""key and mouse"",
            ""bindingGroup"": ""key and mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Phos"",
            ""bindingGroup"": ""Phos"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerAction
        m_PlayerAction = asset.FindActionMap("PlayerAction", throwIfNotFound: true);
        m_PlayerAction_Move = m_PlayerAction.FindAction("Move", throwIfNotFound: true);
        m_PlayerAction_Attack = m_PlayerAction.FindAction("Attack", throwIfNotFound: true);
        m_PlayerAction_Dash = m_PlayerAction.FindAction("Dash", throwIfNotFound: true);
        m_PlayerAction_Pause = m_PlayerAction.FindAction("Pause", throwIfNotFound: true);
        m_PlayerAction_Buy = m_PlayerAction.FindAction("Buy", throwIfNotFound: true);
        m_PlayerAction_Cheat = m_PlayerAction.FindAction("Cheat ", throwIfNotFound: true);
        m_PlayerAction_Status = m_PlayerAction.FindAction("Status", throwIfNotFound: true);
        m_PlayerAction_Screenshot = m_PlayerAction.FindAction("Screenshot", throwIfNotFound: true);
        m_PlayerAction_Skip = m_PlayerAction.FindAction("Skip", throwIfNotFound: true);
        m_PlayerAction_Mouse = m_PlayerAction.FindAction("Mouse", throwIfNotFound: true);
        m_PlayerAction_Reload = m_PlayerAction.FindAction("Reload", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerAction
    private readonly InputActionMap m_PlayerAction;
    private IPlayerActionActions m_PlayerActionActionsCallbackInterface;
    private readonly InputAction m_PlayerAction_Move;
    private readonly InputAction m_PlayerAction_Attack;
    private readonly InputAction m_PlayerAction_Dash;
    private readonly InputAction m_PlayerAction_Pause;
    private readonly InputAction m_PlayerAction_Buy;
    private readonly InputAction m_PlayerAction_Cheat;
    private readonly InputAction m_PlayerAction_Status;
    private readonly InputAction m_PlayerAction_Screenshot;
    private readonly InputAction m_PlayerAction_Skip;
    private readonly InputAction m_PlayerAction_Mouse;
    private readonly InputAction m_PlayerAction_Reload;
    public struct PlayerActionActions
    {
        private @Playerinput m_Wrapper;
        public PlayerActionActions(@Playerinput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerAction_Move;
        public InputAction @Attack => m_Wrapper.m_PlayerAction_Attack;
        public InputAction @Dash => m_Wrapper.m_PlayerAction_Dash;
        public InputAction @Pause => m_Wrapper.m_PlayerAction_Pause;
        public InputAction @Buy => m_Wrapper.m_PlayerAction_Buy;
        public InputAction @Cheat => m_Wrapper.m_PlayerAction_Cheat;
        public InputAction @Status => m_Wrapper.m_PlayerAction_Status;
        public InputAction @Screenshot => m_Wrapper.m_PlayerAction_Screenshot;
        public InputAction @Skip => m_Wrapper.m_PlayerAction_Skip;
        public InputAction @Mouse => m_Wrapper.m_PlayerAction_Mouse;
        public InputAction @Reload => m_Wrapper.m_PlayerAction_Reload;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionActions instance)
        {
            if (m_Wrapper.m_PlayerActionActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnMove;
                @Attack.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnAttack;
                @Dash.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnDash;
                @Pause.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnPause;
                @Buy.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnBuy;
                @Buy.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnBuy;
                @Buy.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnBuy;
                @Cheat.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnCheat;
                @Cheat.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnCheat;
                @Cheat.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnCheat;
                @Status.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnStatus;
                @Status.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnStatus;
                @Status.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnStatus;
                @Screenshot.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnScreenshot;
                @Screenshot.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnScreenshot;
                @Screenshot.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnScreenshot;
                @Skip.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnSkip;
                @Skip.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnSkip;
                @Skip.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnSkip;
                @Mouse.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnMouse;
                @Reload.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnReload;
            }
            m_Wrapper.m_PlayerActionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Buy.started += instance.OnBuy;
                @Buy.performed += instance.OnBuy;
                @Buy.canceled += instance.OnBuy;
                @Cheat.started += instance.OnCheat;
                @Cheat.performed += instance.OnCheat;
                @Cheat.canceled += instance.OnCheat;
                @Status.started += instance.OnStatus;
                @Status.performed += instance.OnStatus;
                @Status.canceled += instance.OnStatus;
                @Screenshot.started += instance.OnScreenshot;
                @Screenshot.performed += instance.OnScreenshot;
                @Screenshot.canceled += instance.OnScreenshot;
                @Skip.started += instance.OnSkip;
                @Skip.performed += instance.OnSkip;
                @Skip.canceled += instance.OnSkip;
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
            }
        }
    }
    public PlayerActionActions @PlayerAction => new PlayerActionActions(this);
    private int m_keyandmouseSchemeIndex = -1;
    public InputControlScheme keyandmouseScheme
    {
        get
        {
            if (m_keyandmouseSchemeIndex == -1) m_keyandmouseSchemeIndex = asset.FindControlSchemeIndex("key and mouse");
            return asset.controlSchemes[m_keyandmouseSchemeIndex];
        }
    }
    private int m_PhosSchemeIndex = -1;
    public InputControlScheme PhosScheme
    {
        get
        {
            if (m_PhosSchemeIndex == -1) m_PhosSchemeIndex = asset.FindControlSchemeIndex("Phos");
            return asset.controlSchemes[m_PhosSchemeIndex];
        }
    }
    public interface IPlayerActionActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnBuy(InputAction.CallbackContext context);
        void OnCheat(InputAction.CallbackContext context);
        void OnStatus(InputAction.CallbackContext context);
        void OnScreenshot(InputAction.CallbackContext context);
        void OnSkip(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
}
